ARG PYTHON_VERSION="3.8"
FROM aymara/manylinux_2_24_with_qt${QT_VERSION}-python${PYTHON_VERSION}:latest as aymara_manylinux_2_24_with_qt
# FROM aymara/manylinux_2_24_with_qt${QT_VERSION}_and_pyside-python${PYTHON_VERSION}:latest as aymara_manylinux_2_24_with_qt_and_pyside
FROM quay.io/pypa/manylinux_2_24_x86_64

ARG QT_VERSION_MAJOR="5"
ARG QT_FULL_VERSION="5.15.2"
ARG PYSIDE_VERSION="2"
ARG PYTHON_VERSION="3.8"
ARG PYTHON_SHORT_VERSION="38"
# For python 3.7, it is 3.7.13
# For python 3.8, it is 3.8.12
ARG PYTHON_FULL_VERSION="3.8.12"

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get clean && apt-get update && apt-get install -y locales
RUN echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
RUN echo "LANG=en_US.UTF-8" >> /etc/default/locale
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
RUN cp  /etc/default/locale /etc/environment
RUN locale-gen
RUN dpkg-reconfigure locales
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

COPY --from=aymara/manylinux_2_24_with_icu:latest /usr/local /usr/local
COPY --from=aymara/manylinux_2_24_with_nltk_data:latest /nltk_data /nltk_data
COPY --from=aymara/manylinux_2_24_with_tensorflow_for_lima_1_9:latest /tensorflow_for_lima /usr/local
# COPY --from=aymara_manylinux_2_24_with_qt_and_pyside /opt /opt
# COPY --from=aymara_manylinux_2_24_with_qt_and_pyside /usr/local /usr/local
COPY --from=aymara_manylinux_2_24_with_qt /opt /opt
COPY --from=aymara_manylinux_2_24_with_qt /usr/local /usr/local

ARG BRANCH=master
ARG USE_TENSORFLOW="true"
ARG GITHUB_TOKEN
ARG LIMA_DISABLE_FSW_TESTING
ARG LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS
ARG NLTK_PTB_DP_FILE

# Setup
RUN apt --fix-broken install
RUN apt-get update -y -qq && apt-get install -y \
        wget build-essential pkg-config automake \
        gawk \
        ninja-build \
        gettext \
        libpulse0 \
        libasound2 \
        libgstreamer1.0 \
        libpulse-mainloop-glib0 \
        gstreamer1.0-x \
        dos2unix

ENV QTDIR=/opt/qt${QT_VERSION_MAJOR}
ENV PATH=/opt/qt${QT_VERSION_MAJOR}/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/qt${QT_VERSION_MAJOR}/lib:$LD_LIBRARY_PATH

WORKDIR /
RUN wget -q https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz
RUN tar xf git-2.9.5.tar.xz
WORKDIR /git-2.9.5
RUN ./configure --prefix=/usr && make -j && make install

WORKDIR /git-lfs
RUN wget -q https://github.com/git-lfs/git-lfs/releases/download/v3.0.2/git-lfs-linux-amd64-v3.0.2.tar.gz
RUN tar xf git-lfs-linux-amd64-v3.0.2.tar.gz
RUN bash install.sh

RUN git lfs install --skip-repo

WORKDIR /
RUN wget --no-check-certificate http://osmot.cs.cornell.edu/svm_light/current/svm_light.tar.gz -q
WORKDIR /svm_light
RUN tar xzf ../svm_light.tar.gz
RUN make
RUN cp svm_classify svm_learn /usr/bin
RUN rm -Rf /svm_light

WORKDIR /
COPY svmtool.sh  svmtool-cpp.sh qhttpserver.sh /
RUN /svmtool.sh $GITHUB_TOKEN
RUN /svmtool-cpp.sh $GITHUB_TOKEN
RUN /qhttpserver.sh $GITHUB_TOKEN

RUN apt remove -y libpython3.5-stdlib libpython3.5-minimal

# install github-release to be able to deploy packages
RUN wget https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 -q && tar xjf linux-amd64-github-release.tar.bz2 && cp bin/linux/amd64/github-release /usr/bin

ENV PATH="/opt/_internal/cpython-${PYTHON_FULL_VERSION}/bin:/opt/python/cp${PYTHON_SHORT_VERSION}-cp${PYTHON_SHORT_VERSION}/bin:${PATH}"
# install python packages necessary to use the language resources install script
RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then pip${PYTHON_VERSION} install arpy requests tqdm scikit-build pyside${PYSIDE_VERSION} shiboken${PYSIDE_VERSION} ; fi"

RUN mkdir -p /src/
RUN git clone -v --branch=$BRANCH --recurse-submodules https://${GITHUB_TOKEN}@github.com/aymara/lima /src/lima
WORKDIR /src/lima
ARG CACHEBUST=1
RUN git pull
RUN echo "$(git show -s --format=%cI HEAD | sed -e 's/[^0-9]//g')-$(git rev-parse --short HEAD)" > release

RUN mkdir -p /src/lima/build
WORKDIR /src/lima/build

#ENV PERL5LIB /SVMTool-1.3.1/lib:$PERL5LIB
#ENV PATH /SVMTool-1.3.1/bin:/usr/share/apps/lima/scripts:/usr/bin:$PATH
ENV NLTK_PTB_DP_FILE /nltk_data/corpora/dependency_treebank/nltk-ptb.dp
ENV LIMA_DISABLE_FSW_TESTING true
ENV LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS true
ENV LIMA_DIST /usr
ENV LIMA_CONF /usr/share/config/lima
ENV LIMA_RESOURCES /usr/share/apps/lima/resources

# Build
#
RUN python --version
RUN cmake -G Ninja  -DQt${QT_VERSION_MAJOR}_DIR:PATH=/opt/qt${QT_VERSION_MAJOR}/${QT_FULL_VERSION}/gcc_64/lib/cmake/Qt${QT_VERSION_MAJOR} -DLIMA_RESOURCES:STRING=build -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_BUILD_TYPE:STRING=Release -DLIMA_VERSION_RELEASE:STRING="$(cat /src/lima/release)" -DSHORTEN_POR_CORPUS_FOR_SVMLEARN:BOOL=ON -DTF_SOURCES_PATH:PATH="/tensorflow-for-lima-1.9/" -DWITH_DEBUG_MESSAGES=ON -DWITH_ARCH=OFF -DWITH_ASAN=OFF -DWITH_GUI=ON  ..
RUN ninja && ninja install && ninja package
RUN install -D -t /usr/share/apps/lima/packages /src/lima/build/*.deb

WORKDIR /usr/share/apps/lima/tests
RUN /bin/bash -c "set -o pipefail && tva --language=eng test-eng.*.xml 2>&1 | tee tva-eng.log"
RUN /bin/bash -c "set -o pipefail && tva --language=fre test-fre.default.xml test-fre.disambiguated.xml test-fre.hyphen.xml test-fre.idiom.xml test-fre.sa.xml test-fre.se.xml test-fre.simpleword.xml test-fre.tokenizer.xml 2>&1 | tee tva-fre.log"
WORKDIR /usr/share/apps/lima/tests/xmlreader
RUN /bin/bash -c "set -o pipefail && tvx --language=eng --language=fre test-fre.xmlreader.xml 2>&1 | tee tvx-fre.log"

## install English and French UD models
#RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then lima_models.py -l english ; fi"
#RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then lima_models.py -l french ; fi"

RUN pip install \
     --index-url=https://download.qt.io/official_releases/QtForPython/ \
     --trusted-host download.qt.io shiboken${PYSIDE_VERSION} pyside${PYSIDE_VERSION} shiboken${PYSIDE_VERSION}_generator

WORKDIR /
