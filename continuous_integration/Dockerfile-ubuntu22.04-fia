FROM aymara/svmtoolpp-ubuntu22.04:latest  as aymara_svmtoolpp-ubuntu22.04

FROM ubuntu:22.04

ARG PACKAGES="yes"
ARG COMPILER="clang"
ENV DEBIAN_FRONTEND=noninteractive

COPY --from=aymara_svmtoolpp-ubuntu22.04 /opt/svmtool++ /usr

RUN apt-get update && apt-get install -y locales unzip bash coreutils apt-utils lsb-release git gcc g++ build-essential make cmake cmake-data curl python3-nltk gawk wget python3 python3-pip ninja-build qt6-base-dev qt6-base-dev-tools libqt6concurrent6 qml6-module-qtqml qt6-tools-dev libqt6concurrent6 qt6-base-dev-tools qt6-declarative-dev qt6-declarative-dev-tools qt6-multimedia-dev libtre-dev libboost-all-dev nodejs npm libicu-dev libeigen3-dev dos2unix python-is-python3 python3-arpy python3-requests python3-tqdm

RUN apt-get install build-essential gcc dirmngr ca-certificates software-properties-common apt-transport-https dkms curl -y
RUN curl -fSsL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub | gpg --dearmor | tee /usr/share/keyrings/nvidia-drivers.gpg > /dev/null 2>&1
RUN echo 'deb [signed-by=/usr/share/keyrings/nvidia-drivers.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /' | tee /etc/apt/sources.list.d/nvidia-drivers.list

RUN apt-get update -y
RUN apt-get install -y cuda-11-8 cuda-toolkit-11-8 cuda-nvcc-11-8

# Use clang or gcc
RUN bash -c 'if [[ "$COMPILER" == "clang" ]] ; then apt-get install -y -qq llvm clang clang-tidy clang-tools && update-alternatives --set cc /usr/bin/clang && update-alternatives --set c++ /usr/bin/clang++ ; else apt-get install -y -qq gcc g++ -qq ; fi'

RUN bash -c '/usr/sbin/update-nvidia-cudnn -u >& /tmp/update-nvidia-cudnn.log || cat /tmp/update-nvidia-cudnn.log'

RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
RUN locale

ARG GITHUB_TOKEN
ARG LIMA_DISABLE_FSW_TESTING
ARG LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS
ARG NLTK_PTB_DP_FILE
ARG USE_TENSORFLOW="true"
ARG CFLAGS=""
ARG CXXFLAGS=""
ARG TORCH_CUDA_ARCH_LIST="6.1"
ARG LIBTORCH_DL="download_libtorch_gpu.sh" # Use download_libtorch_gpu.sh for GPU build

RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then wget https://launchpad.net/~limapublisher/+archive/ubuntu/ppa/+files/libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb -q \
    && dpkg -i libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb \
    && rm -f libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb ; fi

RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then wget https://launchpad.net/~limapublisher/+archive/ubuntu/ppa/+files/libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb -q \
    && dpkg -i libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb \
    && rm -f libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb ; fi

# Setup
RUN npm install -g json

RUN sed -ie "s|DEFAULT_URL = 'http://nltk.googlecode.com/svn/trunk/nltk_data/index.xml'|DEFAULT_URL = 'http://nltk.github.com/nltk_data/'|" /usr/lib/python3/*/nltk/downloader.py
RUN python3 -m nltk.downloader -d nltk_data dependency_treebank
RUN cat nltk_data/corpora/dependency_treebank/wsj_*.dp | grep -v "^$" > nltk_data/corpora/dependency_treebank/nltk-ptb.dp

WORKDIR /
COPY ./continuous_integration/svmtool.sh  ./continuous_integration/svmtool-cpp.sh ./continuous_integration/qhttpserver.sh /
#RUN /svmtool.sh $GITHUB_TOKEN
#RUN /svmtool-cpp.sh $GITHUB_TOKEN
RUN /qhttpserver.sh $GITHUB_TOKEN ubuntu22.04


RUN install -d /src/lima/extern
COPY ./extern/$LIBTORCH_DL /src/lima/extern
WORKDIR /src/lima/extern
RUN bash ./${LIBTORCH_DL}


RUN mkdir -p /src/
COPY . /src/lima
WORKDIR /src/lima/extern
WORKDIR /src/lima
ARG CACHEBUST=1
RUN git submodule init && git submodule update
RUN echo "$(git show -s --format=%cI HEAD | sed -e 's/[^0-9]//g')-$(git rev-parse --short HEAD)" > release

RUN mkdir -p /src/lima/build
WORKDIR /src/lima/build

ENV CUDA_HOME=/usr/local/cuda \
    PERL5LIB=/SVMTool-1.3.1/lib:$PERL5LIB \
    PATH=$CUDA_HOME/bin:/SVMTool-1.3.1/bin:/usr/share/apps/lima/scripts:/usr/bin:$PATH \
    CFLAGS=$CFLAGS \
    CXXFLAGS=$CXXFLAGS \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64 \
    NLTK_PTB_DP_FILE=/nltk_data/corpora/dependency_treebank/nltk-ptb.dp \
    LIMA_DISABLE_FSW_TESTING=true \
    LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS=true \
    LIMA_DIST=/usr \
    LIMA_CONF=/usr/share/config/lima \
    LIMA_RESOURCES=/root/.lima/resources/:/usr/share/apps/lima/resources

# Build
#

RUN cmake -G Ninja -DWITH_LIMA_RESOURCES:BOOL=ON -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_BUILD_TYPE:STRING=Release -DLIMA_VERSION_RELEASE:STRING="$(cat /src/lima/release)" -DSHORTEN_POR_CORPUS_FOR_SVMLEARN:BOOL=ON -DCTEST_OUTPUT_ON_FAILURE=ON -DTF_SOURCES_PATH:PATH="/usr" -DTORCH_CUDA_ARCH_LIST=6.1 -DCMAKE_PREFIX_PATH=/src/lima/extern/libtorch -DWITH_DEBUG_MESSAGES=ON -DWITH_ARCH=OFF -DWITH_ASAN=OFF -DWITH_GUI=OFF -DCMAKE_CUDA_COMPILER:PATH=/usr/local/cuda/bin/nvcc ..
RUN ninja && ninja install && ninja test
