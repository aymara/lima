ARG PYTHON_VERSION="3.8"
ARG QT_VERSION="5.15"
FROM aymara/manylinux_2_28_with_qt${QT_VERSION}_and_pyside-python${PYTHON_VERSION}:latest as aymara_manylinux_2_28_with_qt_and_pyside
FROM quay.io/pypa/manylinux_2_28_x86_64


ARG GCC_VERSION=10.1.0
ARG QT_VERSION_MAJOR="5"
ARG QT_FULL_VERSION="5.15.2"
ARG PYSIDE_VERSION="2"
ARG PYTHON_VERSION="3.8"
ARG PYTHON_SHORT_VERSION="38"
ARG PYTHON_FULL_VERSION="3.8.12"


COPY --from=aymara/manylinux_2_28_with_nltk_data:latest /nltk_data /nltk_data
COPY --from=aymara/manylinux_2_28_with_tensorflow_for_lima_1_9:latest /tensorflow_for_lima /usr/local
COPY --from=aymara_manylinux_2_28_with_qt_and_pyside /opt /opt
COPY --from=aymara_manylinux_2_28_with_qt_and_pyside /usr/local /usr/local

ARG BRANCH=master
ARG USE_TENSORFLOW="true"
ARG GITHUB_TOKEN
ARG LIMA_DISABLE_FSW_TESTING
ARG LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS
ARG NLTK_PTB_DP_FILE

RUN yum install -y wget gcc-toolset-10.x86_64 ninja-build libicu-devel.x86_64 boost-devel.x86_64 qt5-devel.noarch

ENV CC=/opt/rh/gcc-toolset-10/root/usr/bin/gcc \
    CXX=/opt/rh/gcc-toolset-10/root/usr/bin/g++


# WORKDIR /
# RUN wget --no-check-certificate http://osmot.cs.cornell.edu/svm_light/current/svm_light.tar.gz -q
# WORKDIR /svm_light
# RUN tar xzf ../svm_light.tar.gz
# RUN make
# RUN cp svm_classify svm_learn /usr/bin
# RUN rm -Rf /svm_light

WORKDIR /

# Those will have to be compiled for manylinux_2_28 instead of installed with the existing deb package
# COPY svmtool.sh  svmtool-cpp.sh qhttpserver.sh /
# RUN /svmtool.sh $GITHUB_TOKEN
# RUN /svmtool-cpp.sh $GITHUB_TOKEN
# RUN /qhttpserver.sh $GITHUB_TOKEN


# install github-release to be able to deploy packages
RUN wget https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 -q && tar xjf linux-amd64-github-release.tar.bz2 && cp bin/linux/amd64/github-release /usr/bin

ENV PATH="/opt/_internal/cpython-${PYTHON_FULL_VERSION}/bin:/opt/python/cp${PYTHON_SHORT_VERSION}-cp${PYTHON_SHORT_VERSION}/bin:${PATH}"
# install python packages necessary to use the language resources install script
RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then pip${PYTHON_VERSION} install arpy requests tqdm scikit-build pyside${PYSIDE_VERSION} shiboken${PYSIDE_VERSION} ; fi"

RUN mkdir -p /src/
RUN git clone -v --branch=$BRANCH --recurse-submodules https://${GITHUB_TOKEN}@github.com/aymara/lima /src/lima
WORKDIR /src/lima
ARG CACHEBUST=1
RUN git pull
RUN echo "$(git show -s --format=%cI HEAD | sed -e 's/[^0-9]//g')-$(git rev-parse --short HEAD)" > release

RUN mkdir -p /src/lima/build
WORKDIR /src/lima/build

#ENV PERL5LIB /SVMTool-1.3.1/lib:$PERL5LIB
#ENV PATH /SVMTool-1.3.1/bin:/usr/share/apps/lima/scripts:/usr/bin:$PATH
ENV NLTK_PTB_DP_FILE=/nltk_data/corpora/dependency_treebank/nltk-ptb.dp \
    LIMA_DISABLE_FSW_TESTING=true \
    LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS=true \
    LIMA_DIST=/opt/lima \
    LIMA_CONF=/opt/lima/share/config/lima \
    LIMA_RESOURCES=/opt/lima/share/apps/lima/resources \
    PATH=/opt/lima/bin:${PATH} \
    LD_LIBRARY_PATH=/opt/lima/lib:/opt/lima/lib64:${LD_LIBRARY_PATH}

# Build
#
RUN cmake -G Ninja  -DQt${QT_VERSION_MAJOR}_DIR:PATH=/opt/qt${QT_VERSION_MAJOR}/${QT_FULL_VERSION}/gcc_64/lib/cmake/Qt${QT_VERSION_MAJOR} -DLIMA_RESOURCES:STRING=build -DCMAKE_INSTALL_PREFIX:PATH=/opt/lima -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DLIMA_VERSION_RELEASE:STRING="$(cat /src/lima/release)" -DSHORTEN_POR_CORPUS_FOR_SVMLEARN:BOOL=ON -DTF_SOURCES_PATH:PATH="/tensorflow-for-lima-1.9/" -DWITH_DEBUG_MESSAGES=ON -DWITH_ARCH=OFF -DWITH_ASAN=OFF -DWITH_GUI=ON  ..
RUN ninja && ninja install
# && ninja package
# RUN install -D -t /usr/share/apps/lima/packages /src/lima/build/*.

WORKDIR /opt/lima/share/apps/lima/tests
RUN /bin/bash -c "set -o pipefail && tva --language=eng test-eng.*.xml 2>&1 | tee tva-eng.log"
RUN /bin/bash -c "set -o pipefail && tva --language=fre test-fre.default.xml test-fre.disambiguated.xml test-fre.hyphen.xml test-fre.idiom.xml test-fre.sa.xml test-fre.se.xml test-fre.simpleword.xml test-fre.tokenizer.xml 2>&1 | tee tva-fre.log"
WORKDIR /opt/lima/share/apps/lima/tests/xmlreader
RUN /bin/bash -c "set -o pipefail && tvx --language=eng --language=fre test-fre.xmlreader.xml 2>&1 | tee tvx-fre.log"
#
# ## install English and French UD models
# #RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then lima_models.py -l english ; fi"
# #RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then lima_models.py -l french ; fi"
#
WORKDIR /
