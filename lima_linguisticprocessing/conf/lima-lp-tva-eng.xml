<?xml version='1.0' encoding='utf-8'?>

<!--
SPDX-FileCopyrightText: 2022 CEA LIST <gael.de-chalendar@cea.fr>

SPDX-License-Identifier: MIT
-->

<modulesConfig>
  <module name="entities">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/entities"/>
        <item value="ApproxNames-modex.xml/entities"/>
      </list>
    </group>
  </module>
  <module name="Processors">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/Processors"/>
        <item value="ApproxNames-modex.xml/Processors"/>
      </list>
    </group>
    <group name="query" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="simpleWord"/>
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <item value="abbreviationSplitAlternatives"/>
        <item value="fullTokenXmlLoggerAbbreviations"/>
        <item value="idiomaticAlternatives"/>
        <item value="fullTokenXmlLoggerIdiomatic"/>
        <item value="hyphenWordAlternatives"/>
        <item value="fullTokenXmlLoggerHyphen"/>
        <item value="defaultProperties"/>
        <item value="fullTokenXmlLoggerDefaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="specificEntitiesXmlLogger"/>
        <item value="viterbiPostagger-int-none"/>
        <item value="disambiguatedGraphXmlLogger"/>
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalysisXmlLogger"/>
        <item value="compoundBuilderFromSyntacticData"/>
        <item value="compoundsXmlLogger"/>
      </list>
    </group>
    <group name="indexer" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="simpleWord"/>
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <item value="abbreviationSplitAlternatives"/>
        <item value="fullTokenXmlLoggerAbbreviations"/>
        <item value="idiomaticAlternatives"/>
        <item value="fullTokenXmlLoggerIdiomatic"/>
        <item value="hyphenWordAlternatives"/>
        <item value="fullTokenXmlLoggerHyphen"/>
        <item value="defaultProperties"/>
        <item value="fullTokenXmlLoggerDefaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="specificEntitiesXmlLogger"/>
        <item value="viterbiPostagger-freq"/>
        <item value="disambiguatedGraphXmlLogger"/>
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalysisXmlLogger"/>
        <item value="compoundBuilderFromSyntacticData"/>
        <item value="compoundsXmlLogger"/>
      </list>
    </group>
    <group name="limaserver" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="simpleWord"/>
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <item value="abbreviationSplitAlternatives"/>
        <item value="fullTokenXmlLoggerAbbreviations"/>
        <item value="hyphenWordAlternatives"/>
        <item value="fullTokenXmlLoggerHyphen"/>
        <item value="idiomaticAlternatives"/>
        <item value="fullTokenXmlLoggerIdiomatic"/>
        <item value="defaultProperties"/>
        <item value="fullTokenXmlLoggerDefaultProperties"/>
        <item value="SpecificEntitiesModexForLimaserver"/>
        <item value="specificEntitiesXmlLoggerForLimaserver"/>
      </list>
    </group>
    <group name="normalization" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="simpleWord"/>
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <item value="abbreviationSplitAlternatives"/>
        <item value="fullTokenXmlLoggerAbbreviations"/>
        <item value="idiomaticAlternatives"/>
        <item value="fullTokenXmlLoggerIdiomatic"/>
        <item value="hyphenWordAlternatives"/>
        <item value="fullTokenXmlLoggerHyphen"/>
        <item value="defaultProperties"/>
        <item value="fullTokenXmlLoggerDefaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="specificEntitiesXmlLogger"/>
        <item value="viterbiPostagger-int-none"/>
        <item value="disambiguatedGraphXmlLogger"/>
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalysisXmlLogger"/>
        <item value="compoundBuilderFromSyntacticData"/>
        <item value="compoundsXmlLogger"/>
      </list>
    </group>
    <group name="approxmatcher" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="ApproxNamesModex"/>
        <item value="fullTokenXmlLoggerApprox"/>
        <item value="specificEntitiesApproxXmlLogger"/>
        <!--item value="regexmatcher"/-->
        <item value="simpleWord"/>
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <!--item value="idiomaticAlternatives"/-->
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <!--item value="hyphenWordAlternatives"/-->
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <!--item value="abbreviationSplitAlternatives"/-->
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <!--item value="defaultProperties"/-->
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <!--item value="SpecificEntitiesModex"/-->
        <!--item value="specificEntitiesXmlLogger"/-->
        <!--item value="dotGraphWriter-beforepos"/-->
        <!--item value="viterbiPostagger-freq"/-->
        <!--item value="SvmToolPosTagger"/-->
      </list>
    </group>
    <group name="ner-rules-pretok" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="conllureader"/>
        <item value="SpecificEntitiesModex"/>
        <item value="sentenceBoundariesLogger"/>
      </list>
    </group>
    <group name="sentenceBoundariesLogger" class="SentenceBoundariesXmlLogger">
    </group>
    <group name="fakeMultiLevel" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
      </list>
    </group>
    <group name="conllureader" class="ConlluReader">
      <param key="boundaryMicro" value="SENT"/>
    </group>
    <group name="flattokenizer" class="FlatTokenizer">
      <param key="automatonFile" value="LinguisticProcessings/eng/tokenizerAutomaton-eng.tok"/>
      <param key="charChart" value="flatcharchart"/>
    </group>
    <group name="simpleWord" class="SimpleWord">
        <param key="dictionary" value="mainDictionary"/>
        <param key="confidentMode" value="true"/>
        <param key="charChart" value="flatcharchart"/>
        <param key="parseConcatenated" value="true"/>
    </group>
    <group name="fakeSimpleWord" class="SimpleWord">
        <param key="dictionary" value="fakeDictionary"/>
        <param key="confidentMode" value="true"/>
        <param key="charChart" value="flatcharchart"/>
        <param key="parseConcatenated" value="true"/>
    </group>
    <group name="dicoConcatenatedAlternatives" class="DicoConcatenatedAlternatives">
    </group>
    <group name="idiomaticAlternatives" class="ApplyRecognizer">
      <param key="automaton" value="idiomaticExpressionsRecognizer"/>
      <param key="applyOnGraph" value="AnalysisGraph"/>
      <param key="updateGraph" value="yes"/>
    </group>
    <group name="hyphenWordAlternatives" class="HyphenWordAlternatives">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="tokenizer" value="flattokenizer"/>
    </group>
    <group name="abbreviationSplitAlternatives" class="AbbreviationSplitAlternatives">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="tokenizer" value="flattokenizer"/>
      <list name="abbreviations">
        <item value="'s" />
        <item value="'d" />
        <item value="'ve" />
        <item value="'m" />
        <item value="'re" />
        <item value="'ll" />
        <item value="'t" />
      </list>
    </group>
    <group name="defaultProperties" class="DefaultProperties">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="defaultPropertyFile" value="LinguisticProcessings/eng/default-eng.dat"/>
      <list name="skipUnmarkStatus">
        <item value="t_capital_1st"/>
        <item value="t_dot_number"/>
        <item value="t_integer"/>
      </list>
    </group>
    <group name="viterbiPostagger-freq" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="FrequencyCost" />
      <param key="defaultCategory" value="SENT"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="viterbiPostagger-int" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="IntegerCost" />
      <param key="defaultCategory" value="SENT"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="viterbiPostagger-int-none" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="IntegerCost" />
      <param key="defaultCategory" value="NONE_1"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="sentenceBoundariesFinder" class="SentenceBoundariesFinder">
      <param key="graph" value="PosGraph"/>
      <list name="micros">
        <item value="SENT"/>
      </list>
    </group>
    <group name="syntacticAnalyzerChains" class="SyntacticAnalyzerChains">
      <param key="chainMatrix" value="chainMatrix"/>
      <param key="disambiguated" value="true"/>
      <param key="maxChainsNbByVertex" value="30"/>
      <param key="maxChainLength" value="12"/>
    </group>
    <group name="syntacticAnalyzerDisamb" class="SyntacticAnalyzerDisamb">
    </group>
    <group name="syntacticAnalyzerDeps" class="SyntacticAnalyzerDeps">
      <list name="actions">
         <item value="pass1HomoSyntagmaticRelationRules"/>
         <item value="pass2HomoSyntagmaticRelationRules"/>
         <item value="pleonasticPronouns"/>
      </list>
      <param key="disambiguated" value="true"/>
    </group>
    <group name="fullTokenXmlLoggerDefaultProperties" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".default.xml"/>
    </group>
    <group name="compoundBuilderFromSyntacticData" class="CompoundsBuilderFromSyntacticData">
      <map name="Macros2ConceptTypes">
        <entry key="NONE_1" value="LatticeDown"/>
        <entry key="DET" value="Determiner"/>
        <entry key="PRON" value="Determiner"/>
        <entry key="ADV" value="SemanticModifier"/>
        <entry key="ADJ" value="Complementer"/>
        <entry key="NC" value="Complementer"/>
        <entry key="NP" value="Complementer"/>
      </map>
      <map name="conceptTypes">
        <entry key="LatticeDown" value="0"/>
        <entry key="Determiner" value="1"/>
        <entry key="SemanticModifier" value="2"/>
        <entry key="Complementer" value="3"/>
      </map>
      <param key="depGraphMaxBranchingFactor" value="100"/>
      <list name="CompoundsRels">
        <item value="COMPADV"/>
        <item value="ADJPRENSUB"/>
        <item value="SUBADJPOST"/>
        <item value="COMPDUNOM"/>
        <item value="COMPDUNOM2"/>
        <item value="SUBSUBJUX"/>

        <!-- Uncomment relation names below if you want to build compounds
        including verbs and verbal dependencies. To be used in conjuction with
          the syntacticAnalyzerNoChains in mm-lp. -->
            <!--item value="CodPrev"/>
            <item value="SUJ_V"/>
            <item value="COD_V"/>
            <item value="CPL_V"/>
            <item value="MOD_V"/>
            <item value="ATB_S"/>
            <item value="CoiPrev"/>
            <item value="CPLV_V"/-->
      </list>
    </group>
    <group name="fullTokenXmlLoggerTokenizer" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".tokenizer.xml"/>
    </group>
    <group name="fullTokenXmlLoggerApprox" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".approx.xml"/>
    </group>
    <group name="fullTokenXmlLoggerSimpleWord" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".simpleword.xml"/>
    </group>
    <group name="fullTokenXmlLoggerOrthographic" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".ortho.xml"/>
    </group>
    <group name="fullTokenXmlLoggerDicoConcatenated" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".concatenated.xml"/>
    </group>
    <group name="fullTokenXmlLoggerIdiomatic" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".idiom.xml"/>
    </group>
    <group name="fullTokenXmlLoggerHyphen" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".hyphen.xml"/>
    </group>
    <group name="fullTokenXmlLoggerAbbreviations" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".abbrev.xml"/>
    </group>
    <group name="fullTokenXmlLoggerDefaultProperties" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".default.xml"/>
    </group>
    <group name="disambiguatedGraphXmlLogger" class="DisambiguatedGraphXmlLogger">
      <param key="outputSuffix" value=".disambiguated.xml"/>
      <param key="dictionaryCode" value="dictionaryCode"/>
    </group>
    <group name="dotGraphWriter" class="DotGraphWriter">
      <param key="graph" value="AnalysisGraph"/>
      <param key="outputSuffix" value=".dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="text"/>
        <item value="inflectedform"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/>
        <!--item value="genders"/>
      <item value="numbers"/-->
      </list>
    </group>
    <group name="dotDepGraphWriter" class="DotDependencyGraphWriter">
      <param key="writeOnlyDepEdges" value="false"/>
      <param key="outputSuffix" value=".sa.dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="inflectedform"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/>
        <!--item value="genders"/>
        <item value="numbers"/-->
      </list>
    </group>
    <group name="specificEntitiesXmlLogger" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.xml"/>
      <param key="graph" value="AnalysisGraph"/>
      <param key="followGraph" value="true"/>
    </group>
    <group name="specificEntitiesApproxXmlLogger" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.approx.xml"/>
      <param key="graph" value="AnalysisGraph"/>
    </group>
    <group name="specificEntitiesXmlLoggerForLimaserver" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.xml"/>
      <param key="graph" value="AnalysisGraph"/>
      <param key="compactFormat" value="yes"/>
      <param key="handler" value="se"/>
      <param key="followGraph" value="true"/>
    </group>
    <group name="syntacticAnalysisXmlLogger" class="SyntacticAnalysisXmlLogger">
      <param key="outputSuffix" value=".sa.xml"/>
    </group>
    <group name="bowDumper" class="BowDumper">
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="true"/>
      <param key="useEmptyMacro" value="true"/>
      <param key="useEmptyMicro" value="true"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
    <group name="compoundsXmlLogger" class="CompoundsXmlLogger">
      <param key="outputSuffix" value=".compounds.xml"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="false"/>
      <param key="useEmptyMacro" value="false"/>
      <param key="useEmptyMicro" value="false"/>
      <map name="NEmacroCategories">
        <entry key="DateTime.DATE" value="NC"/>
        <entry key="Numex.NUMBER" value="NC"/>
        <entry key="Numex.UNIT" value="NC"/>
        <entry key="Numex.NUMEX" value="NC"/>
        <entry key="Organization.ORGANIZATION" value="NP"/>
        <entry key="Location.LOCATION" value="NP"/>
        <entry key="Person.PERSON" value="NP"/>
        <entry key="Product.PRODUCT" value="NP"/>
        <entry key="Event.EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
  </module>
  <module name="Resources">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/resources-eng"/>
        <item value="ApproxNames-modex.xml/resources-eng"/>
      </list>
    </group>

    <group name="FsaStringsPool">
      <param key="mainKeys" value="globalFsaAccess"/>
    </group>
    <group name="flatcharchart" class="FlatTokenizerCharChart">
      <param key="charFile" value="LinguisticProcessings/eng/tokenizerAutomaton-eng.chars.tok"/>
    </group>
    <group name="mainDictionary" class="EnhancedAnalysisDictionary">
      <param key="accessKeys" value="globalFsaAccess"/>
      <param key="dictionaryValuesFile" value="LinguisticProcessings/eng/dicoDat-eng.dat"/>
    </group>
    <group name="fakeCorporateAccess" class="FsaAccess">
      <param key="keyFile" value="LinguisticProcessings/fre/fake/corporateKey-fre.dat"/>
    </group>
    <group name="fakeUserAccess" class="FsaAccess">
      <param key="keyFile" value="LinguisticProcessings/fre/fake/userKey-fre.dat"/>
    </group>
    <group name="globalFsaAccess" class="FsaAccess">
      <param key="keyFile" value="LinguisticProcessings/eng/dicoKey-eng.dat"/>
    </group>
    <group name="trigramMatrix" class="TrigramMatrix">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
    </group>
    <group name="bigramMatrix" class="BigramMatrix">
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
    </group>
    <group name="stopList" class="StopList">
      <param key="file" value="LinguisticProcessings/StopLists/stopList-eng.dat"/>
    </group>
    <group name="idiomaticExpressionsRecognizer" class="AutomatonRecognizer">
      <param key="rules" value="LinguisticProcessings/eng/idiomaticExpressions-eng.bin"/>
    </group>
    <group name="chainMatrix" class="SyntagmDefinitionStructure">
      <param key="file" value="SyntacticAnalysis/chainsMatrix-eng.bin"/>
    </group>
    <group name="pass1HomoSyntagmaticRelationRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-homodeps-pass1.txt.bin"/>
    </group>
    <group name="pass2HomoSyntagmaticRelationRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-homodeps-pass2.txt.bin"/>
    </group>
    <group name="pleonasticPronouns" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-pleonasticPronouns.txt.bin"/>
    </group>
  </module>
</modulesConfig>
