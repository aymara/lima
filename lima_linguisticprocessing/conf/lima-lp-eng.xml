<?xml version='1.0' encoding='UTF-8'?>
<modulesConfig>
  <module name="entities">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/entities"/>
        <item value="ApproxNames-modex.xml/entities"/>
      </list>
    </group>
  </module>
  <module name="Processors">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/Processors"/>
        <item value="VerbNet-modex.xml/Processors"/>
        <item value="ApproxNames-modex.xml/Processors"/>
      </list>
    </group>

<!-- ******************************************
  Definition of pipelines
*********************************************** -->
    <group name="main" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
      	<!--item value="langdetector"/-->
        <item value="flattokenizer"/>
        <item value="regexmatcher"/>
        <!--item value="fullTokenXmlLoggerTokenizer"/-->
        <item value="simpleWord"/>
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <!--item value="fullTokenXmlLoggerSimpleWord"/-->
        <item value="idiomaticAlternatives"/>
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <item value="hyphenWordAlternatives"/>
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <item value="abbreviationSplitAlternatives"/>
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <item value="defaultProperties"/>
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <item value="SpecificEntitiesModex"/>
        <!--item value="specificEntitiesXmlLogger"/-->
        <!--item value="dotGraphWriter-beforepos"/-->
<!--         <item value="viterbiPostagger-freq"/> -->
<!--         <item value="SvmToolPosTagger"/> -->
        <item value="@PosTagger@"/>
        <!--item value="DynamicSvmToolPosTagger"/-->
        <!--item value="disambiguatedGraphXmlLogger"/-->
        <!--item value="dotGraphWriter"/-->
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalyzerDepsHetero"/>
        <item value="syntacticAnalyzerDummy"/>
        <!--item value="dotDepGraphWriter"/-->
        <!--item value="coreferencesSolving"/-->
        <!--item value="annotDotGraphWriter"/-->
        <!--item value="depTripletLogger"/-->
        <!--item value="corefLogger" /-->
        <!-- VerbNetRecognition is a fake/empty modex allowing to define VerbNet entity types -->
        <!--item value="VerbNetRecognition"/-->
        <!--item value="VerbNetRecognition"/-->
        <!--item value="kbsrl"/-->
        <item value="conllDumper"/>
        <!--item value="bowDumper"/-->
        <!--item value="textDumper"/-->
        <!--item value="fullXmlDumper"/-->
        <!--item value="NullDumper"/-->
        <!--item value="temporalXmlDumper"/-->
        <!--item value="afterFusionXmlDumper"/-->
      </list>
    </group>
    <!-- NER pipelines                                                    -->
    <!--                                                                  -->
    <!-- For plain text input (deep learning based plain text tokenizer): -->
    <!-- * ner-rules:         rule-based NER                              -->
    <!-- * ner-deep:          deep leraning based NER                     -->
    <!-- * ner-fusion:        deep learning based NER + rule-based NER    -->
    <!--                                                                  -->
    <!-- For CoNLL-U input:                                               -->
    <!-- * ner-rules-pretok:  rule-based NER                              -->
    <!-- * ner-deep-pretok:   deep leraning based NER                     -->
    <!-- * ner-fusion-pretok: deep learning based NER + rule-based NER    -->
    <group name="ner-rules" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="cpptftokenizer"/>
        <item value="simpleWord"/>
        <!--item value="hyphenWordAlternatives"/-->
        <item value="defaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <group name="ner-rules-pretok" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="conllureader"/>
        <item value="simpleWord"/>
        <!--item value="hyphenWordAlternatives"/-->
        <item value="defaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <group name="ner-deep" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="cpptftokenizer"/>
        <item value="simpleWord"/>
        <!--item value="hyphenWordAlternatives"/-->
        <item value="defaultProperties"/>
        <item value="tensorflowSpecificEntitiesFusion"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <group name="ner-deep-pretok" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="conllureader"/>
        <item value="simpleWord"/>
        <!--item value="hyphenWordAlternatives"/-->
        <item value="defaultProperties"/>
        <item value="tensorflowSpecificEntitiesFusion"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <!-- hyphenWordAlternatives commented out because it internally calls -->
    <!-- flatTokenizer                                                    -->
    <group name="ner-fusion" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="cpptftokenizer"/>
        <item value="simpleWord"/>
        <item value="defaultProperties"/>
        <item value="tensorflowSpecificEntitiesFusion"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="SpecificEntitiesModex"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <group name="ner-fusion-pretok" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="conllureader"/>
        <item value="simpleWord"/>
        <item value="defaultProperties"/>
        <item value="tensorflowSpecificEntitiesFusion"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="SpecificEntitiesModex"/>
        <item value="sentenceBoundariesUpdater"/>
        <item value="conllDumperNer"/>
      </list>
    </group>
    <!-- End of NER pipelines                                             -->
    <group name="approxmatcher" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="ApproxNamesModex"/>
        <!--item value="specificEntitiesApproxXmlLogger"/-->
        <!--item value="regexmatcher"/-->
        <item value="simpleWord"/>
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <!--item value="idiomaticAlternatives"/-->
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <!--item value="hyphenWordAlternatives"/-->
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <!--item value="abbreviationSplitAlternatives"/-->
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <!--item value="defaultProperties"/-->
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <!--item value="SpecificEntitiesModex"/-->
        <item value="specificEntitiesXmlLogger"/>
        <!--item value="dotGraphWriter-beforepos"/-->
        <!--item value="viterbiPostagger-freq"/-->
        <!--item value="SvmToolPosTagger"/-->
      </list>
    </group>

    <group name="deep" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="regexmatcher"/>
        <!--item value="fullTokenXmlLoggerTokenizer"/-->
        <item value="simpleWord"/>
        <item value="sentenceBoundariesFinderForSE"/>
        @tensorflowSpecificEntities@
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <!--item value="fullTokenXmlLoggerSimpleWord"/-->
        <item value="idiomaticAlternatives"/>
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <item value="hyphenWordAlternatives"/>
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <item value="abbreviationSplitAlternatives"/>
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <item value="defaultProperties"/>
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <!--item value="SpecificEntitiesModex"/-->
        <!--item value="specificEntitiesXmlLogger"/-->
        <!--item value="dotGraphWriter-beforepos"/-->
        <item value="viterbiPostagger-freq"/>
        <!--item value="SvmToolPosTagger"/-->
        <!--item value="DynamicSvmToolPosTagger"/-->
        <!--item value="disambiguatedGraphXmlLogger"/-->
        <!--item value="dotGraphWriter"/-->
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalyzerDepsHetero"/>
        <item value="syntacticAnalyzerDummy"/>
        <!--item value="dotDepGraphWriter"/-->
        <!--item value="coreferencesSolving"/-->
        <!--item value="annotDotGraphWriter"/-->
        <!--item value="depTripletLogger"/-->
        <!--item value="corefLogger" /-->
        <!-- VerbNetRecognition is a fake/empty modex allowing to define VerbNet entity types -->
        <!--item value="VerbNetRecognition"/-->
        <!--item value="VerbNetRecognition"/-->
        <!--item value="kbsrl"/-->
        <item value="conllDumper"/>
        <!--item value="bowDumper"/-->
        <!--item value="textDumper"/-->
        <!--item value="fullXmlDumper"/-->
        <!--item value="NullDumper"/-->
        <!--item value="temporalXmlDumper"/-->
        <!--item value="afterFusionXmlDumper"/-->
      </list>
    </group>

    <group name="limaserver" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="simpleWord"/>
        <item value="hyphenWordAlternatives"/>
        <item value="idiomaticAlternatives"/>
        <item value="defaultProperties"/>
        <item value="SpecificEntitiesModexForLimaserver"/>
        <item value="specificEntitiesXmlLoggerForLimaserver"/>
      </list>
    </group>

    <group name="query" class="ProcessUnitPipeline">
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="fullTokenXmlLoggerTokenizer"/>
        <item value="ApproxNamesModex"/>
        <!--item value="specificEntitiesApproxXmlLogger"/-->
        <!--item value="regexmatcher"/-->
        <item value="simpleWord"/>
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <item value="fullTokenXmlLoggerSimpleWord"/>
        <!--item value="idiomaticAlternatives"/-->
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <!--item value="hyphenWordAlternatives"/-->
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <!--item value="abbreviationSplitAlternatives"/-->
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <!--item value="defaultProperties"/-->
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <!--item value="SpecificEntitiesModex"/-->
        <item value="specificEntitiesXmlLogger"/>
        <!--item value="dotGraphWriter-beforepos"/-->
        <!--item value="viterbiPostagger-freq"/-->
        <!--item value="SvmToolPosTagger"/-->
      </list>
    </group>

    <group name="easy" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="simpleWord"/>
        <item value="idiomaticAlternatives"/>
        <item value="hyphenWordAlternatives"/>
        <item value="abbreviationSplitAlternatives"/>
        <item value="defaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="dotGraphWriter-beforepos"/>
        <item value="viterbiPostagger-freq"/>
        <item value="dotGraphWriter"/>
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalyzerDepsHetero"/>
        <item value="dotDepGraphWriter"/>
        <item value="easyXmlDumper"/>
        <item value="fullXmlDumper"/>
        <!-- VerbNetRecognition is a fake/empty modex allowing to define VerbNet entity types -->
        <item value="VerbNetRecognition"/>
        <item value="bowDumper"/>
      </list>
    </group>

    <group name="learn" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
	<!--item value="flattokenizer"/-->
        <!--item value="regexmatcher"/-->
        <!--item value="tokenizer"/-->
        <!--item value="fullTokenXmlLoggerTokenizer"/-->
        <!--item value="simpleWord"/-->
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <!--item value="fullTokenXmlLoggerSimpleWord"/-->
        <!--item value="idiomaticAlternatives"/-->
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <!--item value="hyphenWordAlternatives"/-->
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <!--item value="abbreviationSplitAlternatives"/-->
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <!--item value="defaultProperties"/??-->
        <!--item value="fullTokenXmlLoggerDefaultProperties"/-->
        <!--item value="RapportInspectionModex"/-->
	<!--item value="RapportInspectionCRFModex"/-->
	<!--item value="RapportInspectionFiltrageModex"/-->
        <!--item value="specificEntitiesXmlLogger"/-->
        <!--item value="dotGraphWriter-beforepos"/-->
        <!--item value="viterbiPostagger-freq"/-->
	<item value="SpecificEntitiesCRFLearn"/>
        <!--item value="SvmToolPosTagger"/-->
        <!--item value="DynamicSvmToolPosTagger"/-->
        <!--item value="disambiguatedGraphXmlLogger"/-->
        <!--item value="dotGraphWriter"/-->
        <!--item value="sentenceBoundariesFinder"/-->
        <!--item value="syntacticAnalyzerChains"/-->
        <!--item value="syntacticAnalyzerDeps"/-->
        <!--item value="syntacticAnalyzerDepsHetero"/-->
        <!--item value="dotDepGraphWriter"/-->
        <!--item value="syntacticAnalysisXmlLogger"/-->
        <!--item value="compoundBuilderFromSyntacticData"/-->
        <!--item value="compoundsXmlLogger"/-->
        <!--item value="coreferencesSolving"/-->
        <!--item value="annotDotGraphWriter"/-->
        <!--item value="depTripletLogger"/-->
        <!--item value="corefLogger" /-->
        <!-- Use bowDumperXml to analyze XML documents containing several media using analyzeMultimediaXmlDocuments-->
        <!--item value="bowDumperXml"/-->
        <!--item value="conllDumper"/-->
        <!--item value="textDumper"/-->
        <!--item value="fullXmlDumper"/-->
        <!--item value="NullDumper"/-->
      </list>
    </group>

     <group name="tag" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
	<item value="flattokenizer"/>
        <!--item value="regexmatcher"/-->
        <!--item value="tokenizer"/-->
        <!--item value="fullTokenXmlLoggerTokenizer"/-->
        <item value="simpleWord"/>
        <!--item value="dotGraphWriter-forCorefEval"/-->
        <!--item value="fullTokenXmlLoggerSimpleWord"/-->
        <item value="idiomaticAlternatives"/>
        <!--item value="fullTokenXmlLoggerIdiomatic"/-->
        <item value="hyphenWordAlternatives"/>
        <!--item value="fullTokenXmlLoggerHyphen"/-->
        <item value="abbreviationSplitAlternatives"/>
        <!--item value="fullTokenXmlLoggerAbbreviations"/-->
        <item value="defaultProperties"/>
        <item value="fullTokenXmlLoggerDefaultProperties"/>
        <item value="specificEntitiesXmlLogger"/>
	<item value="SpecificEntitiesCRFTag"/>
        <!--item value="dotGraphWriter-beforepos"/-->
        <item value="viterbiPostagger-freq"/>
        <!--item value="SvmToolPosTagger"/-->
        <!--item value="DynamicSvmToolPosTagger"/-->
        <!--item value="disambiguatedGraphXmlLogger"/-->
        <!--item value="dotGraphWriter"/-->
        <!--item value="sentenceBoundariesFinder"/-->
        <!--item value="syntacticAnalyzerChains"/-->
        <!--item value="syntacticAnalyzerDeps"/-->
        <!--item value="syntacticAnalyzerDepsHetero"/-->
        <!--item value="dotDepGraphWriter"/-->
        <!--item value="syntacticAnalysisXmlLogger"/-->
        <!--item value="compoundBuilderFromSyntacticData"/-->
        <!--item value="compoundsXmlLogger"/-->
        <!--item value="coreferencesSolving"/-->
        <!--item value="annotDotGraphWriter"/-->
        <!--item value="depTripletLogger"/-->
        <!--item value="corefLogger" /-->
        <!-- Use bowDumperXml to analyze XML documents containing several media using analyzeMultimediaXmlDocuments-->
        <!--item value="bowDumperXml"/-->
        <!--item value="conllDumper"/-->
        <!--item value="textDumper"/-->
        <!--item value="fullXmlDumper"/-->
        <!--item value="NullDumper"/-->
      </list>
    </group>

    <group name="xml" class="ProcessUnitPipeline" >
      <list name="processUnitSequence">
        <item value="flattokenizer"/>
        <item value="regexmatcher"/>
        <item value="simpleWord"/>
        <item value="idiomaticAlternatives"/>
        <item value="hyphenWordAlternatives"/>
        <!-- Uncoment spellingAlternatives below if lima is built with Enchant
          support and if you wish to support background spelling correction -->
            <!--item value="spellingAlternatives"/-->
        <item value="abbreviationSplitAlternatives"/>
        <item value="defaultProperties"/>
        <item value="SpecificEntitiesModex"/>
        <item value="@PosTagger@"/>
        <item value="sentenceBoundariesFinder"/>
        <item value="syntacticAnalyzerChains"/>
        <item value="syntacticAnalyzerDeps"/>
        <item value="syntacticAnalyzerDepsHetero"/>
        <item value="syntacticAnalyzerDummy"/>
        <item value="bowDumperXml"/>
      </list>
    </group>

    <group name="none" class="ProcessUnitPipeline">
      <list name="processUnitSequence"/>
    </group>
<!-- ******************************************
  Definition of process units
*********************************************** -->
    <group name="conllureader" class="ConlluReader">
      <param key="boundaryMicro" value="SENT"/>
    </group>
    <group name="conllureaderWithoutSentBoundaries" class="ConlluReader">
      <param key="boundaryMicro" value="SENT"/>
      <param key="data" value=""/>
    </group>
    <group name="cpptftokenizer" class="CppUppsalaTensorFlowTokenizer">
      <param key="model_prefix" value="tokenizer-$udlang"/>
    </group>
    <group name="flattokenizer" class="FlatTokenizer">
      <param key="automatonFile" value="LinguisticProcessings/eng/tokenizerAutomaton-eng.tok"/>
      <param key="charChart" value="flatcharchart"/>
    </group>
    <group name="langdetector" class="LangDetector">
      <param key="langDetectorModel" value="LinguisticProcessings/LangDetector/lid.176.ftz"/>
    </group>
    <group name="regexmatcher" class="RegexMatcher">
      <map name="regexes">
        <!-- acronym -->
        <entry key="[a-zA-Z](\.[a-zA-Z])+\.?" value="t_acronym"/>
        <!-- email adress -->
        <entry key="\w+(\.[\w\-]+)*\@(\w[\w\-]*)(\.\w[\w\-]+)+" value="t_url"/>
        <!-- twitter -->
        <entry key="\@\w{3}\w*" value="t_url"/>
        <!-- ip address -->
        <entry key="\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}" value="t_url"/>
        <!-- web adress -->
        <entry key="((mailto|http|ftp|https):\/\/)\w[\w\-]*(\.\w[\w\-]*)*(\.\w\w*)([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?" value="t_url"/>
        <!--do not allow without http unless explicit www or explicit extension: don't want to recognize 10.000 as a url)-->
        <entry key="www.\w[\w\-]*(\.\w[\w\-]*)*(\.\w\w*)([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?" value="t_url"/>
        <entry key="([\w\-]+)+\.(uk|com|org|edu|fr|es|de|gov)([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?" value="t_url"/>
      </map>
    </group>
    <group name="simpleWord" class="SimpleWord">
        <param key="dictionary" value="mainDictionary"/>
        <param key="confidentMode" value="true"/>
        <param key="charChart" value="flatcharchart"/>
        <param key="parseConcatenated" value="true"/>
    </group>
    <group name="tensorflowSpecificEntities" class="TensorflowSpecificEntities">
      <param key="graphOutputFile" value="TensorFlowSpecificEntities/eng/IOB1/output_graph.pb"/>
      <param key="charValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/chars.txt"/>
      <param key="wordValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/words.txt"/>
      <param key="tagValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/tags.txt"/>
      <param key="batchSizeMax" value="20"/>
    </group>

    <group name="tensorflowSpecificEntitiesFusion" class="TensorflowSpecificEntities">
      <param key="graphOutputFile" value="TensorFlowSpecificEntities/eng/IOB1/output_graph.pb"/>
      <param key="charValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/chars.txt"/>
      <param key="wordValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/words.txt"/>
      <param key="tagValuesFile" value="TensorFlowSpecificEntities/eng/IOB1/tags.txt"/>
      <param key="batchSizeMax" value="20"/>
      <param key="sentBoundaries" value="SentenceBoundaries"/>
    </group>

    <!-- deprecated -->
    <!--group name="idiomaticAlternatives" class="IdiomaticAlternatives">
      <param key="dictionary" value="mainDictionary"/>
      <param key="recognizer" value="idiomaticExpressionsRecognizer"/>
      <param key="dictionaryCode" value="dictionaryCode"/>
    </group-->
    <group name="idiomaticAlternatives" class="ApplyRecognizer">
      <param key="automaton" value="idiomaticExpressionsRecognizer"/>
      <param key="applyOnGraph" value="AnalysisGraph"/>
      <param key="updateGraph" value="yes"/>
    </group>
    <group name="coreferencesSolving" class="CoreferencesSolving">
      <param key="scope" value="SENT" />
      <param key="threshold" value="130" />
      <param key="Resolve Definites" value="SENT" />
      <param key="Resolve non third person pronouns" value="SENT" />
      <map name="MacroCategories">
        <entry key="PronMacroCategory" value="PRON"/>
        <entry key="VerbMacroCategory" value="SENT" />
        <entry key="PrepMacroCategory" value="PREP" />
        <entry key="NomCommunMacroCategory" value="NC" />
        <entry key="NomPropreMacroCategory" value="NP" />
      </map>
      <list name="LexicalAnaphora">
        <item value="PRP$"/>
      </list>
      <list name="UndefinitePronouns">
      </list>
      <list name="PrepRelation">
        <item value="PREPSUB"/>
        <item value="PrepDetInt"/>
        <item value="PrepInf"/>
        <item value="PrepPronRelCa"/>
        <item value="PrepPron"/>
        <item value="PrepPronRel"/>
        <item value="PrepPronCliv"/>
        <item value="PrepAdv"/>
      </list>
      <list name="PleonasticRelation">
        <item value="Pleon"/>
      </list>
      <list name="DefiniteRelation">
        <item value="DETSUB"/>
      </list>
      <list name="SubjectRelation">
        <item value="SUJ_V" />
        <item value="SUJ_V_REL" />
        <item value="PronSujVerbe" />
        <item value="PronReflVerbe" />
        <item value="SujInv" />
      </list>
      <list name="AttributeRelation">
              <item value="ATB_S"/>
      </list>
      <list name="CODRelation">
        <item value="COD_V" />
        <item value="CodPrev" />
      </list>
      <list name="COIRelation">
        <item value="CoiPrev" />
        <item value="CPL_V" />
      </list>
      <list name="AdjunctRelation">
        <item value="CPLV_V" />
        <item value="CC_TEMPS" />
        <item value="CC_LIEU" />
        <item value="CC_BUT" />
        <item value="CC_MOYEN" />
        <item value="CC_MANIERE" />
        <item value="MOD_V" />
      </list>
      <list name="AgentRelation">
        <item value="CAgent_V" />
      </list>
      <list name="NPDeterminerRelation">
        <item value="COMPDUNOM" />
        <item value="COMPDUNOM2" />
        <item value="SUBSUBJUX" />
        <item value="COMP_N-N" />
        <item value="COMPDUNOM_INC" />
      </list>
      <!-- Lappin & Leass salience factors -->
      <map name="SalienceFactors">
        <entry key="SentenceRecency" value="100"/>
        <entry key="SubjEmph" value="80"/>
        <entry key="ExistEmph" value="70"/>
        <entry key="CodEmph" value="50"/>
        <entry key="CoiCoblEmph" value="40"/>
        <entry key="HeadEmph" value="80"/>
        <entry key="NonAdvEmph" value="50"/>
        <entry key="IsInSubordinate" value="-70"/>
        <entry key="Cataphora" value="-60"/>
        <entry key="SameSlot" value="10"/>
        <entry key="Itself" value="-60"/>
            </map>
      <map name="SlotValues">
        <entry key="SubjectRelation" value="SENT"/>
        <entry key="AgentRelation" value="SENT"/>
        <entry key="CODRelation" value="SENT"/>
        <entry key="COIRelation" value="SENT"/>
        <entry key="AdjunctRelation" value="SENT"/>
      </map>
    </group>
    <group name="hyphenWordAlternatives" class="HyphenWordAlternatives">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="tokenizer" value="flattokenizer"/>
      <param key="confidentMode" value="true"/>
      <param key="sentBoundaries" value="SentenceBoundaries"/>
    </group>
    <group name="abbreviationSplitAlternatives" class="AbbreviationSplitAlternatives">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="tokenizer" value="flattokenizer"/>
      <param key="confidentMode" value="true"/>
      <list name="abbreviations">
        <item value="'s" />
        <item value="'d" />
        <item value="'ve" />
        <item value="'m" />
        <item value="'re" />
        <item value="'ll" />
        <item value="'t" />
      </list>
    </group>
    <group name="defaultProperties" class="DefaultProperties">
      <param key="dictionary" value="mainDictionary"/>
      <param key="charChart" value="flatcharchart"/>
      <param key="defaultPropertyFile" value="LinguisticProcessings/eng/default-eng.dat"/>
      <list name="skipUnmarkStatus">
        <item value="t_capital_1st"/>
        <item value="t_dot_number"/>
        <item value="t_integer"/>
      </list>
    </group>
    <group name="simpleDefaultProperties" class="SimpleDefaultProperties">
      <list name="defaultCategories">
        <item value="NOUN PROPN"/>
      </list>
    </group>
    <group name="viterbiPostagger-freq" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="FrequencyCost" />
      <param key="defaultCategory" value="SENT"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="viterbiPostagger-int" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="IntegerCost" />
      <param key="defaultCategory" value="SENT"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="viterbiPostagger-int-none" class="ViterbiPosTagger">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
      <param key="costFunction" value="IntegerCost" />
      <param key="defaultCategory" value="NONE_1"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="DynamicSvmToolPosTagger" class="SvmToolPosTagger">
      <param key="model" value="Disambiguation/SVMToolModel-eng/lima"/>
      <param key="defaultCategory" value="SENT"/>
      <list name="stopCategories">
        <item value="SENT" />
      </list>
    </group>
    <group name="SvmToolPosTagger" class="SvmToolPosTagger">
      <param key="model" value="Disambiguation/SVMToolModel-eng/lima"/>
    </group>
    <group name="sentenceBoundariesFinder" class="SentenceBoundariesFinder">
      <param key="graph" value="PosGraph"/>
      <param key="data" value="SentenceBoundaries"/>
      <list name="micros">
        <item value="SENT"/>
      </list>
    </group>
    <group name="sentenceBoundariesUpdater" class="SentenceBoundariesUpdater">
      <param key="graph" value="AnalysisGraph"/>
      <param key="data" value="SentenceBoundaries"/>
    </group>
    <group name="sentenceBoundariesFinderForSE" class="SentenceBoundariesFinder">
      <param key="graph" value="AnalysisGraph"/>
      <param key="data" value="SentenceBoundariesForSE"/>
      <list name="micros">
        <item value="SENT"/>
      </list>
    </group>
    <group name="syntacticAnalyzerChains" class="SyntacticAnalyzerChains">
      <param key="chainMatrix" value="chainMatrix"/>
      <param key="disambiguated" value="true"/>
      <param key="maxChainsNbByVertex" value="30"/>
      <param key="maxChainLength" value="12"/>
    </group>
    <!-- syntacticAnalyzerNoChains replaces syntacticAnalyzerChains. It is an
    experimental module used to test if LIMA analysis works without nominal and
    verbal. It allows also to build compounds using verbs and heterosyntagmatic
    dependencies. For that, one have to add adequate relations in
    CompoundRelations in mm-common. -->
    <group name="syntacticAnalyzerNoChains" class="SyntacticAnalyzerNoChains">
      <param key="chainMatrix" value="chainMatrix"/>
      <param key="disambiguated" value="true"/>
      <param key="maxChainsNbByVertex" value="30"/>
      <param key="maxChainLength" value="12"/>
    </group>
    <group name="syntacticAnalyzerDummy" class="SyntacticAnalyzerDeps">
      <list name="actions">
        <item value="dummyRules"/>
      </list>
    </group>
    <group name="syntacticAnalyzerDeps" class="SyntacticAnalyzerDeps">
      <list name="actions">
         <item value="pass1HomoSyntagmaticRelationRules"/>
         <item value="pass2HomoSyntagmaticRelationRules"/>
         <item value="pleonasticPronouns"/>
      </list>
      <param key="disambiguated" value="true"/>
    </group>
    <group name="syntacticAnalyzerDepsHetero" class="SyntacticAnalyzerDepsHetero">
      <param key="rules" value="heteroSyntagmaticRelationRules"/>
      <param key="unfold" value="true"/>
      <param key="linkSubSentences" value="true"/>
      <map name="subSentencesRules">
        <entry key="Parent" value="heteroSyntagmaticRelationRules"/>
        <entry key="Quotes" value="heteroSyntagmaticRelationRules"/>
        <entry key="SUBSUBJUX" value="heteroSyntagmaticRelationRules"/>
      </map>
    </group>
    <group name="tagFusion" class="ExternalProcessUnit">
      <param key="dumper" value="temporalXmlDumper"/>
      <param key="tmpFileName" value="/tmp/mm-lp.morphoSyntacticalAnalysis.tmp"/>
      <param key="command" value="python /home/clemence/conversion_tag.py"/>
      <param key="loader" value="tagFusionLoader"/>
    </group>
    <group name="tagFusionLoader" class="ExampleLoader">
      <param key="inputFile" value="..."/>
    </group>

<!-- ******************************************
  Definition of loggers
*********************************************** -->
    <group name="beginStatusLogger" class="StatusLogger">
      <param key="outputFile" value="beginStatus-eng.log"/>
      <list name="toLog">
        <item value="VmSize"/>
        <item value="VmData"/>
      </list>
    </group>
    <group name="specificEntitiesXmlLogger" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.xml"/>
      <param key="graph" value="AnalysisGraph"/>
    </group>
    <group name="specificEntitiesApproxXmlLogger" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.approx.xml"/>
      <param key="graph" value="AnalysisGraph"/>
    </group>
    <group name="fullTokenXmlLoggerTokenizer" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".toks.xml"/>
    </group>
    <group name="fullTokenXmlLoggerApprox" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".approx.xml"/>
    </group>
    <group name="fullTokenXmlLoggerSimpleWord" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".words.xml"/>
    </group>
    <group name="specificEntitiesXmlLoggerForLimaserver" class="SpecificEntitiesXmlLogger">
      <param key="outputSuffix" value=".se.xml"/>
      <param key="graph" value="AnalysisGraph"/>
      <param key="compactFormat" value="yes"/>
      <param key="handler" value="se"/>
      <param key="followGraph" value="true"/>
    </group>
    <group name="fullTokenXmlLoggerHyphen" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".hyph.xml"/>
    </group>
    <group name="fullTokenXmlLoggerAbbreviations" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".abbr.xml"/>
    </group>
    <group name="fullTokenXmlLoggerIdiomatic" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".idiom.xml"/>
    </group>
    <group name="fullTokenXmlLoggerDefaultProperties" class="FullTokenXmlLogger">
      <param key="outputSuffix" value=".default.xml"/>
    </group>
    <group name="disambiguatedGraphXmlLogger" class="DisambiguatedGraphXmlLogger">
      <param key="outputSuffix" value=".disambiguated.xml"/>
      <param key="dictionaryCode" value="dictionaryCode"/>
    </group>
    <group name="debugSyntacticAnalysisLogger-chains" class="DebugSyntacticAnalysisLogger">
      <param key="outputSuffix" value=".syntanal.chains.txt"/>
    </group>
    <group name="debugSyntacticAnalysisLogger-disamb" class="DebugSyntacticAnalysisLogger">
      <param key="outputSuffix" value=".syntanal.disamb.txt"/>
    </group>
    <group name="debugSyntacticAnalysisLogger-deps" class="DebugSyntacticAnalysisLogger">
      <param key="outputSuffix" value=".syntanal.deps.txt"/>
    </group>
    <group name="syntacticAnalysisXmlLogger" class="SyntacticAnalysisXmlLogger">
      <param key="outputSuffix" value=".sa.xml"/>
    </group>
    <group name="depTripletLogger" class="DepTripletLogger">
      <param key="outputSuffix" value=".deptrip.txt"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="true"/>
      <param key="useEmptyMacro" value="true"/>
      <param key="useEmptyMicro" value="true"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
      <list name="selectedDependency">
        <item value="ADJPRENSUB"/>
        <item value="APPOS"/>
        <item value="ATB_O"/>
        <item value="ATB_S"/>
        <item value="COD_V"/>
        <item value="COMPDUNOM"/>
        <item value="COMPL"/>
        <item value="CPL_V"/>
        <item value="SUBADJPOST"/>
        <item value="SUBSUBJUX"/>
        <item value="SUJ_V"/>
      </list>
    </group>
    <group name="corefLogger" class="CorefSolvingLogger">
      <param key="outputSuffix" value=".wh"/>
    </group>
    <group name="dotGraphWriterAfterSA" class="DotGraphWriter">
      <param key="outputSuffix" value=".sa.dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="lemme"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/>
        <!--item value="genders"/>
        <item value="numbers"/-->
      </list>
    </group>
    <group name="dotGraphWriter-forCorefEval" class="DotGraphWriter">
      <param key="graph" value="AnalysisGraph"/>
      <param key="outputSuffix" value=".sw.dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="text"/>
        <!--item value="inflectedform"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/-->
        <!--item value="genders"/>
      <item value="numbers"/-->
      </list>
    </group>
    <group name="dotGraphWriter-beforepos" class="DotGraphWriter">
      <param key="graph" value="AnalysisGraph"/>
      <param key="outputSuffix" value=".bp.dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="text"/>
        <item value="inflectedform"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/>
        <!--item value="genders"/>
      <item value="numbers"/-->
      </list>
    </group>
    <group name="dotGraphWriter" class="DotGraphWriter">
      <param key="outputSuffix" value=".dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="lemme"/>
        <item value="symbolicmacrocategory"/>
        <item value="symbolicmicrocategory"/>
        <!--item value="numericmicrocategory"/-->
      </list>
    </group>
    <group name="dotDepGraphWriter" class="DotDependencyGraphWriter">
      <param key="outputMode" value="SentenceBySentence"/> <!-- Valid values: FullGraph,SentenceBySentence -->
      <param key="writeOnlyDepEdges" value="false"/>
      <param key="outputSuffix" value=".sa.dot"/>
      <param key="trigramMatrix" value="trigramMatrix"/>
      <param key="bigramMatrix" value="bigramMatrix"/>
      <list name="vertexDisplay">
        <item value="inflectedform"/>
        <item value="symbolicmicrocategory"/>
        <item value="numericmicrocategory"/>
        <!--item value="genders"/>
        <item value="numbers"/-->
      </list>
      <map name="graphDotOptions">
        <entry key="rankdir" value="LR"/>
      </map>
      <map name="nodeDotOptions">
        <entry key="shape" value="box"/>
      </map>
    </group>
    <group name="annotDotGraphWriter" class="AnnotDotGraphWriter">
      <param key="graph" value="PosGraph"/>
      <param key="outputSuffix" value=".ag.dot"/>
    </group>
<!-- ******************************************
  Definition of dumpers
*********************************************** -->
    <group name="bratDumper" class="BratDumper">
      <!--param key="handler" value="simpleStreamHandler"/-->
      <param key="outputSuffix" value=".ann"/>
      <param key="stripInputSuffix" value="true"/>
      <param key="graph" value="AnalysisGraph"/>
      <param key="domain" value=""/>
      <param key="followGraph" value="true"/>
      <param key="outputGroups" value="false"/>
      <param key="useNorms" value="false"/>
      <param key="outputAllAttributes" value="false"/>
      <list name="attributes"/>
      <list name="eventTemplates"/>
    </group>
    <group name="conllDumperNer" class="ConllDumper">
      <param key="handler" value="simpleStreamHandler"/>
      <param key="graph" value="AnalysisGraph"/>
      <param key="format" value="CoNLL-03"/>
    </group>
    <group name="bowDumper" class="BowDumper">
      <param key="handler" value="bowTextWriter"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="true"/>
      <param key="useEmptyMacro" value="true"/>
      <param key="useEmptyMicro" value="true"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
    <group name="srl" class="ExternalProcessUnit">
      <param key="dumper" value="conllDumperToFile"/>
      <param key="inputSuffix" value=".conll"/>
      <param key="outputSuffix" value=".conll.srl"/>
      <param key="command" value="(path to knowledgesrl)/src/main.py --conll_input %1 --conll_output %2"/>

      <param key="loader" value="srlLoader"/>
    </group>
    <group name="kbsrl" class="KnowledgeBasedSemanticRoleLabeler">
      <param key="loglevel" value="error"/>
      <param key="path" value="path/to/aymara/knowledgesrl/src"/>
      <param key="mode" value="VerbNet"/>
      <param key="dumper" value="conllDumperToFile"/>
      <param key="inputSuffix" value=".conll"/>
      <param key="outputSuffix" value=".conll.srl"/>
      <param key="loader" value="srlLoader"/>
    </group>
    <group name="srlLoader" class="SemanticRoleLabelingLoader">
      <param key="inputSuffix" value=".conll.srl"/>
    </group>
    <group name="bowTextHandler" class="BowDumper">
      <param key="handler" value="bowTextHandler"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="false"/>
      <param key="useEmptyMacro" value="false"/>
      <param key="useEmptyMicro" value="false"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
    <group name="bowDumperXml" class="BowDumper">
      <param key="handler" value="xmlDocumentHandler"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="true"/>
      <param key="useEmptyMacro" value="true"/>
      <param key="useEmptyMicro" value="true"/>
      <map name="NEmacroCategories">
        <entry key="DateTime.DATE" value="NC"/>
        <entry key="Numex.NUMBER" value="NC"/>
        <entry key="Numex.UNIT" value="NC"/>
        <entry key="Numex.NUMEX" value="NC"/>
        <entry key="Organization.ORGANIZATION" value="NP"/>
        <entry key="Location.LOCATION" value="NP"/>
        <entry key="Person.PERSON" value="NP"/>
        <entry key="Product.PRODUCT" value="NP"/>
        <entry key="Event.EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
    <group name="NullDumper" class="NullDumper"/>
    <group name="agXmlDumper" class="AnnotationGraphXmlDumper">
      <param key="handler" value="xmlSimpleStreamHandler"/>
    </group>

    <group name="normalizationBowDumper" class="BowDumper">
      <param key="handler" value="bowTextWriter"/>
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="false"/>
      <param key="useEmptyMacro" value="false"/>
      <param key="useEmptyMicro" value="false"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
      <param key="NEnormalization" value="useNENormalizedForm"/>
    </group>
    <!--group name="compactFullDumper" class="CompactFullDumper">
      <param key="stopList" value="stopList"/>
      <param key="useStopList" value="true"/>
      <param key="useEmptyMacro" value="true"/>
      <param key="useEmptyMicro" value="true"/>
      <map name="NEmacroCategories">
        <entry key="TIMEX" value="NC"/>
        <entry key="NUMEX" value="NC"/>
        <entry key="ORGANIZATION" value="NP"/>
        <entry key="LOCATION" value="NP"/>
        <entry key="PERSON" value="NP"/>
        <entry key="PRODUCT" value="NP"/>
        <entry key="EVENT" value="NP"/>
      </map>
      <param key="properNounCategory" value="NP"/>
      <param key="commonNounCategory" value="NC"/>
    </group-->
    <group name="fullXmlDumper" class="FullXmlDumper">
      <param key="handler" value="fullXmlSimpleStreamHandler"/>
    </group>
    <group name="posGraphXmlDumper" class="posGraphXmlDumper">
      <param key="handler" value="xmlSimpleStreamHandler"/>
    </group>
    <group name="conllDumperToFile" class="ConllDumper">
      <param key="outputSuffix" value=".conll"/>
      <param key="withColsHeader" value="true"/>
      <param key="mappingFile" value="SRLIntegration/lima_conll_dependency_tag_mapping/mapping_conll_Lima.txt"/>
    </group>
    <group name="conllDumper" class="ConllDumper">
      <param key="format" value="CoNLL-U"/> <!-- default -->
      <param key="handler" value="simpleStreamHandler"/>
      <param key="withColsHeader" value="true"/>
    </group>
    <group name="conll03Dumper" class="ConllDumper">
      <param key="format" value="CoNLL-03"/>
      <param key="handler" value="simpleStreamHandler"/>
    </group>
    <group name="textDumper" class="TextDumper">
      <param key="outputSuffix" value=".out"/>
      <param key="handler" value="simpleStreamHandler"/>
    </group>
    <group name="ltrDumper" class="LTRDumper">
      <param key="handler" value="simpleStreamHandler"/>
    </group>
    <group name="depTripletDumper" class="DepTripletDumper">
      <param key="handler" value="simpleStreamHandler"/>
      <list name="selectedDependency">
        <!--item value="ADJPRENSUB"/-->
        <!--item value="ADVADV"/-->
        <!--item value="AdvSub"/-->
        <!--item value="APPOS"/-->
        <!--item value="ATB_O"/-->
        <!--item value="ATB_S"/-->
        <item value="COD_V"/>
        <!--item value="COMPADJ"/-->
        <!--item value="COMPADV"/-->
        <!--item value="CompDet"/-->
        <item value="COMPDUNOM"/>
        <!--item value="COMPL"/-->
        <!--item value="COORD1"/-->
        <!--item value="COORD2"/-->
        <!--item value="CPL_V"/-->
        <!--item value="DETSUB"/-->
        <!--item value="MOD_A"/-->
        <!--item value="MOD_N"/-->
        <!--item value="MOD_V"/-->
        <!--item value="Neg"/-->
        <!--item value="PrepDet"/-->
        <!--item value="PrepPron"/-->
        <!--item value="PREPSUB"/-->
        <item value="SUBADJPOST"/>
        <!--item value="SUBSUBJUX"/-->
        <item value="SUJ_V"/>
      </list>
    </group>
    <group name="temporalXmlDumper" class="SimpleXmlDumper">
     <param key="outputFile" value="/tmp/mm-lp.morphoSyntacticalAnalysis.tmp"/>
    </group>
    <group name="afterFusionXmlDumper" class="SimpleXmlDumper">
     <param key="outputFile" value="/tmp/mm-lp.morphoSyntacticalAnalysis-changed.tmp"/>
    </group>
  </module>
<!-- ******************************************
  Definition of resources
*********************************************** -->
  <module name="Resources">
    <group name="include">
      <list name="includeList">
        <item value="SpecificEntities-modex.xml/resources-eng"/>
        <item value="VerbNet-modex.xml/resources-eng"/>
        <item value="ApproxNames-modex.xml/resources-eng"/>
      </list>
    </group>

    <group name="FsaStringsPool">
      <param key="mainKeys" value="globalFsaAccess"/>
    </group>
    <group name="flatcharchart" class="FlatTokenizerCharChart">
      <param key="charFile" value="LinguisticProcessings/eng/tokenizerAutomaton-eng.chars.tok"/>
    </group>
    <group name="mainDictionary" class="EnhancedAnalysisDictionary">
      <param key="accessKeys" value="globalFsaAccess"/>
      <param key="dictionaryValuesFile" value="LinguisticProcessings/eng/dicoDat-eng.dat"/>
    </group>
    <group name="globalFsaAccess" class="FsaAccess">
      <param key="keyFile" value="LinguisticProcessings/eng/dicoKey-eng.dat"/>
    </group>
    <group name="dictionaryCode" class="DictionaryCode">
      <param key="codeFile" value="LinguisticProcessings/eng/code-eng.dat"/>
      <param key="codeListFile" value="LinguisticProcessings/eng/codesList-eng.dat"/>
      <param key="categoriesNamesFile" value="LinguisticProcessings/eng/categoriesNames-eng.dat"/>
    </group>
    <group name="trigramMatrix" class="TrigramMatrix">
      <param key="trigramFile" value="Disambiguation/trigramMatrix-eng.dat"/>
    </group>
    <group name="bigramMatrix" class="BigramMatrix">
      <param key="bigramFile" value="Disambiguation/bigramMatrix-eng.dat"/>
    </group>
    <group name="stopList" class="StopList">
      <param key="file" value="LinguisticProcessings/StopLists/stopList-eng.dat"/>
    </group>
    <group name="idiomaticExpressionsRecognizer" class="AutomatonRecognizer">
      <param key="rules" value="LinguisticProcessings/eng/idiomaticExpressions-eng.bin"/>
    </group>
    <group name="chainMatrix" class="SyntagmDefinitionStructure">
      <param key="file" value="SyntacticAnalysis/chainsMatrix-eng.bin"/>
    </group>
    <group name="pass1HomoSyntagmaticRelationRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-homodeps-pass1.txt.bin"/>
    </group>
    <group name="pass2HomoSyntagmaticRelationRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-homodeps-pass2.txt.bin"/>
    </group>
    <group name="pleonasticPronouns" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-pleonasticPronouns.txt.bin"/>
    </group>
    <group name="heteroSyntagmaticRelationRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-heterodeps.txt.bin"/>
    </group>
    <group name="dummyRules" class="AutomatonRecognizer">
      <param key="rules" value="SyntacticAnalysis/rules-eng-dummy.txt.bin"/>
    </group>
    <group name="automatonCompiler" class="AutomatonRecognizer">
      <param key="rules" value=""/>
    </group>

    <group name="bowTextWriter" class="BowTextWriter"/>
    <group name="bowTextXmlWriter" class="BowTextXmlWriter"/>
    <group name="bowTextHandler" class="BowTextHandler"/>
    <group name="bowDocumentHandler" class="BowDocumentHandler"/>
    <group name="eventHandler" class="eventHandler"/>
    <group name="simpleStreamHandler" class="SimpleStreamHandler"/>
    <group name="xmlDocumentHandler" class="xmlDocumentHandler"/>
    <group name="fullXmlSimpleStreamHandler" class="SimpleStreamHandler"/>
  </module>
</modulesConfig>
