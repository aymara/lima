on:
  push:
    branches:
    - master

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  MANYLINUX_TAG: "2022-10-25-fbea779"
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.7"
  PYTHON_SHORT_VERSION: "cp37-cp37m"
  PYTHON_WHEEL_VERSION: "cp37-abi3"
  PYTHON_FULL_VERSION: "3.7.13"
  QT_VERSION_MAJOR: "5"
  QT_VERSION_MINOR: "15"
  QT_VERSION_PATCH: "2"
  QT_VERSION: "5.15"
  QT_FULL_VERSION: "5.15.2"
  PYSIDE_VERSION: "2"
  LLVM_VERSION: "14.0.6"
  GCC_VERSION: "10.1.0"


jobs:

  debian11:
    name: "Build on Debian 11 with TensorFlow support"
    runs-on: ubuntu-latest
#    container: docker:20.10.13-dind

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.4.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "continuous_integration/Dockerfile-debian11"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: BRANCH=${{ github.ref_name }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  # Cannot run this build on each commit to master, it takes to much time (several hours), having to build the
  # whole qt and llvm, etc.

  #manylinux_2_28_with_qt_and_pyside:
    #name: "Build the manylinux_2_28_with_qt_and_pyside image necessary for lima-python"
    #runs-on: ubuntu-latest

    #steps:
      #-
        #name: Login to DockerHub
        #uses: docker/login-action@v2
        #with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: "Checkout code"
        #uses: actions/checkout@v3

      ##- name: "Free disk space"
        ##run: bash ./free-diskspace.sh

      #- name: "Build image"
        #run: cd ./continuous_integration && docker build --progress=plain -f Dockerfile-manylinux_2_28_with_qt_and_pyside --build-arg MANYLINUX_TAG="${MANYLINUX_TAG}" --build-arg BRANCH="${BRANCH}" --build-arg GCC_VERSION="${GCC_VERSION}" --build-arg LLVM_VERSION="${LLVM_VERSION}" --build-arg QT_FULL_VERSION="${QT_FULL_VERSION}" --build-arg QT_VERSION_MAJOR="${QT_VERSION_MAJOR}" --build-arg QT_VERSION_MINOR="${QT_VERSION_MINOR}" --build-arg QT_VERSION_PATCH="${QT_VERSION_PATCH}" --build-arg QT_VERSION="${QT_VERSION}" --build-arg PYSIDE_VERSION="${PYSIDE_VERSION}" --build-arg PYTHON_VERSION=${PYTHON_VERSION} --build-arg PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION} --build-arg PYTHON_FULL_VERSION=${PYTHON_FULL_VERSION} -t aymara/manylinux_2_28_with_qt${QT_VERSION}_and_pyside-python${PYTHON_VERSION}:latest .

      #- name: "Push image"
        #run: docker push aymara/manylinux_2_28_with_qt${QT_VERSION}_and_pyside-python${PYTHON_VERSION}:latest

  manylinux_2_28_lima-manylinux:
    name: "Build the manylinux_2_28_lima-manylinux image necessary for lima-python"
    runs-on: ubuntu-latest

    steps:
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Build image"
        run: cd ./continuous_integration && docker build -f Dockerfile-manylinux_2_28_lima-manylinux --build-arg MANYLINUX_TAG="${MANYLINUX_TAG}" --build-arg BRANCH="${{ github.ref_name }}" --build-arg GCC_VERSION="${GCC_VERSION}" --build-arg LLVM_VERSION="${LLVM_VERSION}" --build-arg QT_FULL_VERSION="${QT_FULL_VERSION}" --build-arg QT_VERSION_MAJOR="${QT_VERSION_MAJOR}" --build-arg QT_VERSION_MINOR="${QT_VERSION_MINOR}" --build-arg QT_VERSION_PATCH="${QT_VERSION_PATCH}" --build-arg QT_VERSION="${QT_VERSION}" --build-arg PYSIDE_VERSION="${PYSIDE_VERSION}" --build-arg PYTHON_VERSION=${PYTHON_VERSION} --build-arg PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION} --build-arg PYTHON_FULL_VERSION=${PYTHON_FULL_VERSION} -t aymara/lima-manylinux_2_28-qt${QT_VERSION}-python${PYTHON_VERSION}:latest .

      - name: "Push image"
        run: docker push aymara/lima-manylinux_2_28-qt${QT_VERSION}-python${PYTHON_VERSION}:latest

  ubuntu22_04_lima:
    name: "Build the Ubuntu 22.04 Lima image"
    runs-on: ubuntu-latest

    steps:
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Free disk space"
        run: bash ./free-diskspace.sh

      - name: "Build image"
        run: docker build -f ./continuous_integration/Dockerfile-ubuntu22.04 --build-arg BRANCH="${{ github.ref_name }}" --build-arg PACKAGES="no" -t aymara/lima-ubuntu22.04:latest .

      - name: "Push image"
        run: docker push aymara/lima-ubuntu22.04:latest

  ubuntu22_04_lima_factoryia:
    name: "Build the Ubuntu 22.04 Lima image for the FactoryIA cluster"
    runs-on: ubuntu-latest
    env:
      LIBTORCH_DL: "./download_libtorch_gpu.sh"
      COMPILER: "gcc"

    steps:
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Free disk space"
        run: bash ./free-diskspace.sh

      - name: "Build image"
        run: docker build -f ./continuous_integration/Dockerfile-ubuntu22.04-fia --build-arg BRANCH="${{ github.ref_name }}"  --build-arg CFLAGS="${CFLAGS}" --build-arg CXXFLAGS="${CXXFLAGS}" --build-arg LIBTORCH_DL="${LIBTORCH_DL}" --build-arg COMPILER="gcc" --build-arg PACKAGES="no" -t aymara/lima-ubuntu22.04-fia:latest .

      - name: "Push docker image"
        run: docker push aymara/lima-ubuntu22.04-fia:latest

      - name: "Convert docker image to Singularity"
        run: |
          singularity build lima_factoryia.sif docker-daemon://aymara/lima-ubuntu22.04-fia:latest
          sha256sum lima_factoryia.sif >> sha256sums

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            lima_factoryia.sif
            sha256sums
