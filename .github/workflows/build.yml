on:
  push:
    branches:
    - master

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: 3.8
  PYTHON_SHORT_VERSION: 38


jobs:
#  ubuntu20tf:
#    name: "Build on Ubuntu 20.04 with TensorFlow support"
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: "Checkout code"
#        uses: actions/checkout@v2
#
#      - name: "Build image"
#        run: docker build --tag travis-ubuntu20.04 --build-arg BRANCH="master" --build-arg USE_TENSORFLOW="true" -f ./continuous_integration/Dockerfile-travis-ubuntu20.04 .

  debian11:
    name: "Build on Debian 11 with TensorFlow support"
    runs-on: ubuntu-latest
#    container: docker:20.10.13-dind

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.4.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "continuous_integration/Dockerfile-debian11"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: BRANCH=${{ steps.extract_branch.outputs.branch }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  # Cannot run this build on each commit to master, it takes to much time (several hours), having to build the
  # whole qt and llvm, etc.

  #manylinux:
    #name: "Build the manylinux-based imaged necessary for lima-python"
    #runs-on: ubuntu-latest

    #steps:
      #- name: "Checkout code"
        #uses: actions/checkout@v2

      #- name: "Build image"
        #run: cd ./continuous_integration && docker build --build-arg PYTHON_VERSION=${PYTHON_VERSION} --build-arg PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION}  --tag aymara/lima-manylinux_2_24:latest -f ./Dockerfile-manylinux_2_24 .

      #- name: "Push image"
        #run: docker push aymara/lima-manylinux_2_24:latest
